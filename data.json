{
    "Programming": [
        {
            "id": "Insert int.",
            "category": "Intervals",
            "placeHolderCpp": "vector<Interval> insertInterval(vector<Interval>& intervals, Interval newInterval) { /*...*/ }",
            "placeHolderGo": "func insertInterval(intervals []Interval, newInterval Interval) []Interval { /*...*/ }",
            "spaceComplexity": "O(N)",
            "timeComplexity": "O(N)",
            "difficulty": "Medium",
            "question": "Insert interval",
            "answerImage": "",
            "answerCpp": "vector<Interval> insertInterval(vector<Interval>& intervals, Interval newInterval) { vector<Interval> result; int i = 0; int n = intervals.size(); while (i < n && intervals[i].end < newInterval.start) { result.push_back(intervals[i++]); } while (i < n && intervals[i].start <= newInterval.end) { newInterval.start = min(newInterval.start, intervals[i].start); newInterval.end = max(newInterval.end, intervals[i].end); i++; } result.push_back(newInterval); while (i < n) { result.push_back(intervals[i++]); } return result;}",
            "answerGo": ""
        }
    ],
    "SystemDesign": []
}
